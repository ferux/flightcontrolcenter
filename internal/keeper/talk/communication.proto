syntax = "proto3";
package talk;

import "google/protobuf/timestamp.proto";
// validate fields as well
import "github.com/mwitkow/go-proto-validators/validator.proto";
// import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;

enum MessageType {
  UNKNOWN = 0;
  APPROVE = 1;
  DENY = 2;
  PING = 3;
  PONG = 4;
  CLIENT_INFO = 5;
}

message Version {
  uint64 major = 1
      [ (validator.field) = {msg_exists : true} ]; // required field tbo
  uint64 minor = 2
      [ (validator.field) = {msg_exists : true} ]; // required field tbo
  uint64 patch = 3
      [ (validator.field) = {msg_exists : true} ]; // required field tbo
  string extension = 4; // additional info, maybe rc or pre-build or whatever
}

// ClientInfo is a message sent by client to identify itself
message ClientInfo {
  string device_id = 1 [
    (validator.field) = {
      msg_exists : true,
      string_not_empty : true,
    },
    (gogoproto.customname) = "DeviceID"
  ]; // unique id that has been generated on first run
  Version api_version = 2
      [ (gogoproto.customname) = "APIVersion" ]; // it's obvious
  google.protobuf.Timestamp build_time = 3
      [ (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false ]; // same
  string revision = 4;                  // revision of built
  string secret = 5;                    // secret is a hard-coded phrase
  google.protobuf.Timestamp client_time = 6 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];                          // just to test timestamp
  DeviceType device_type = 7; // type of the device
  string MAC = 8;

  enum DeviceType {
    DEVICE_TYPE_UNKNOWN = 0;
    DEVICE_TYPE_PHONE = 1;
    DEVICE_TYPE_MEDIA = 2;
    DEVICE_TYPE_PC = 3;
  }
}

// Approve incoming `ClientInfo` request
message Approve { uint64 server_time = 2; }

// Denied message to tell device service was unable to accept it
message Denied {
  string reason = 1; // why request has been denied
  bool soft = 2;     // should device try again or some actions required
}

// Inform server that disconnect is planned
message GracefulGoodbye {
  string reason = 1; // why shutdown called
}

// Ping client (usually issued by server to check client is still here)
message Ping {}

// Pong back to server to show client is still here.
message Pong {}

// MeasureLatencyRequest measures latency between devices
message MeasureLatencyRequest { uint64 current_time = 1; }

message MeasureLatencyResponse {
  // calculated value that should be get as the result of
  // (current_time - MeasureLatencyRequest.current_time) calculations
  uint64 latency = 1;
}
