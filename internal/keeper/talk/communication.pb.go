// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: communication.proto

package talk

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MessageType int32

const (
	MessageType_UNKNOWN     MessageType = 0
	MessageType_APPROVE     MessageType = 1
	MessageType_DENY        MessageType = 2
	MessageType_PING        MessageType = 3
	MessageType_PONG        MessageType = 4
	MessageType_CLIENT_INFO MessageType = 5
)

var MessageType_name = map[int32]string{
	0: "UNKNOWN",
	1: "APPROVE",
	2: "DENY",
	3: "PING",
	4: "PONG",
	5: "CLIENT_INFO",
}

var MessageType_value = map[string]int32{
	"UNKNOWN":     0,
	"APPROVE":     1,
	"DENY":        2,
	"PING":        3,
	"PONG":        4,
	"CLIENT_INFO": 5,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b64068f22c460ac1, []int{0}
}

type ClientInfo_DeviceType int32

const (
	ClientInfo_UNKNOWN ClientInfo_DeviceType = 0
	ClientInfo_PHONE   ClientInfo_DeviceType = 1
	ClientInfo_MEDIA   ClientInfo_DeviceType = 2
	ClientInfo_PC      ClientInfo_DeviceType = 3
)

var ClientInfo_DeviceType_name = map[int32]string{
	0: "UNKNOWN",
	1: "PHONE",
	2: "MEDIA",
	3: "PC",
}

var ClientInfo_DeviceType_value = map[string]int32{
	"UNKNOWN": 0,
	"PHONE":   1,
	"MEDIA":   2,
	"PC":      3,
}

func (x ClientInfo_DeviceType) String() string {
	return proto.EnumName(ClientInfo_DeviceType_name, int32(x))
}

func (ClientInfo_DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b64068f22c460ac1, []int{1, 0}
}

type APIVersion struct {
	Major                uint64   `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor                uint64   `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch                uint64   `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
	Extension            string   `protobuf:"bytes,4,opt,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *APIVersion) Reset()         { *m = APIVersion{} }
func (m *APIVersion) String() string { return proto.CompactTextString(m) }
func (*APIVersion) ProtoMessage()    {}
func (*APIVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64068f22c460ac1, []int{0}
}
func (m *APIVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIVersion.Merge(m, src)
}
func (m *APIVersion) XXX_Size() int {
	return m.Size()
}
func (m *APIVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_APIVersion.DiscardUnknown(m)
}

var xxx_messageInfo_APIVersion proto.InternalMessageInfo

func (m *APIVersion) GetMajor() uint64 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *APIVersion) GetMinor() uint64 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *APIVersion) GetPatch() uint64 {
	if m != nil {
		return m.Patch
	}
	return 0
}

func (m *APIVersion) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

// ClientInfo is a message sent by client to identify itself
type ClientInfo struct {
	DeviceId             string                `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	ApiVersion           *APIVersion           `protobuf:"bytes,2,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	BuildTime            uint64                `protobuf:"varint,3,opt,name=build_time,json=buildTime,proto3" json:"build_time,omitempty"`
	Revision             string                `protobuf:"bytes,4,opt,name=revision,proto3" json:"revision,omitempty"`
	Secret               string                `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`
	ClientTime           uint64                `protobuf:"varint,6,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
	DeviceType           ClientInfo_DeviceType `protobuf:"varint,7,opt,name=device_type,json=deviceType,proto3,enum=talk.ClientInfo_DeviceType" json:"device_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ClientInfo) Reset()         { *m = ClientInfo{} }
func (m *ClientInfo) String() string { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()    {}
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64068f22c460ac1, []int{1}
}
func (m *ClientInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientInfo.Merge(m, src)
}
func (m *ClientInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientInfo proto.InternalMessageInfo

func (m *ClientInfo) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *ClientInfo) GetApiVersion() *APIVersion {
	if m != nil {
		return m.ApiVersion
	}
	return nil
}

func (m *ClientInfo) GetBuildTime() uint64 {
	if m != nil {
		return m.BuildTime
	}
	return 0
}

func (m *ClientInfo) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *ClientInfo) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *ClientInfo) GetClientTime() uint64 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

func (m *ClientInfo) GetDeviceType() ClientInfo_DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return ClientInfo_UNKNOWN
}

// Approve incoming `ClientInfo` request
type Approve struct {
	ServerTime           uint64   `protobuf:"varint,2,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Approve) Reset()         { *m = Approve{} }
func (m *Approve) String() string { return proto.CompactTextString(m) }
func (*Approve) ProtoMessage()    {}
func (*Approve) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64068f22c460ac1, []int{2}
}
func (m *Approve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Approve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Approve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Approve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Approve.Merge(m, src)
}
func (m *Approve) XXX_Size() int {
	return m.Size()
}
func (m *Approve) XXX_DiscardUnknown() {
	xxx_messageInfo_Approve.DiscardUnknown(m)
}

var xxx_messageInfo_Approve proto.InternalMessageInfo

func (m *Approve) GetServerTime() uint64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

// Denied message to tell device service was unable to accept it
type Denied struct {
	Reason               string   `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Soft                 bool     `protobuf:"varint,2,opt,name=soft,proto3" json:"soft,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Denied) Reset()         { *m = Denied{} }
func (m *Denied) String() string { return proto.CompactTextString(m) }
func (*Denied) ProtoMessage()    {}
func (*Denied) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64068f22c460ac1, []int{3}
}
func (m *Denied) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Denied) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Denied.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Denied) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Denied.Merge(m, src)
}
func (m *Denied) XXX_Size() int {
	return m.Size()
}
func (m *Denied) XXX_DiscardUnknown() {
	xxx_messageInfo_Denied.DiscardUnknown(m)
}

var xxx_messageInfo_Denied proto.InternalMessageInfo

func (m *Denied) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Denied) GetSoft() bool {
	if m != nil {
		return m.Soft
	}
	return false
}

// Inform server that disconnect is planned
type GracefulGoodbye struct {
	Reason               string   `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GracefulGoodbye) Reset()         { *m = GracefulGoodbye{} }
func (m *GracefulGoodbye) String() string { return proto.CompactTextString(m) }
func (*GracefulGoodbye) ProtoMessage()    {}
func (*GracefulGoodbye) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64068f22c460ac1, []int{4}
}
func (m *GracefulGoodbye) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GracefulGoodbye) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GracefulGoodbye.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GracefulGoodbye) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GracefulGoodbye.Merge(m, src)
}
func (m *GracefulGoodbye) XXX_Size() int {
	return m.Size()
}
func (m *GracefulGoodbye) XXX_DiscardUnknown() {
	xxx_messageInfo_GracefulGoodbye.DiscardUnknown(m)
}

var xxx_messageInfo_GracefulGoodbye proto.InternalMessageInfo

func (m *GracefulGoodbye) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// Ping client (usually issued by server to check client is still here)
type Ping struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64068f22c460ac1, []int{5}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return m.Size()
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

// Pong back to server to show client is still here.
type Pong struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64068f22c460ac1, []int{6}
}
func (m *Pong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return m.Size()
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

// MeasureLatencyRequest measures latency between devices
type MeasureLatencyRequest struct {
	CurrentTime          uint64   `protobuf:"varint,1,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeasureLatencyRequest) Reset()         { *m = MeasureLatencyRequest{} }
func (m *MeasureLatencyRequest) String() string { return proto.CompactTextString(m) }
func (*MeasureLatencyRequest) ProtoMessage()    {}
func (*MeasureLatencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64068f22c460ac1, []int{7}
}
func (m *MeasureLatencyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeasureLatencyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeasureLatencyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeasureLatencyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeasureLatencyRequest.Merge(m, src)
}
func (m *MeasureLatencyRequest) XXX_Size() int {
	return m.Size()
}
func (m *MeasureLatencyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MeasureLatencyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MeasureLatencyRequest proto.InternalMessageInfo

func (m *MeasureLatencyRequest) GetCurrentTime() uint64 {
	if m != nil {
		return m.CurrentTime
	}
	return 0
}

type MeasureLatencyResponse struct {
	// calculated value that should be get as the result of
	// (current_time - MeasureLatencyRequest.current_time) calculations
	Latency              uint64   `protobuf:"varint,1,opt,name=latency,proto3" json:"latency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeasureLatencyResponse) Reset()         { *m = MeasureLatencyResponse{} }
func (m *MeasureLatencyResponse) String() string { return proto.CompactTextString(m) }
func (*MeasureLatencyResponse) ProtoMessage()    {}
func (*MeasureLatencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64068f22c460ac1, []int{8}
}
func (m *MeasureLatencyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeasureLatencyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeasureLatencyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeasureLatencyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeasureLatencyResponse.Merge(m, src)
}
func (m *MeasureLatencyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MeasureLatencyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MeasureLatencyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MeasureLatencyResponse proto.InternalMessageInfo

func (m *MeasureLatencyResponse) GetLatency() uint64 {
	if m != nil {
		return m.Latency
	}
	return 0
}

func init() {
	proto.RegisterEnum("talk.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("talk.ClientInfo_DeviceType", ClientInfo_DeviceType_name, ClientInfo_DeviceType_value)
	proto.RegisterType((*APIVersion)(nil), "talk.APIVersion")
	proto.RegisterType((*ClientInfo)(nil), "talk.ClientInfo")
	proto.RegisterType((*Approve)(nil), "talk.Approve")
	proto.RegisterType((*Denied)(nil), "talk.Denied")
	proto.RegisterType((*GracefulGoodbye)(nil), "talk.GracefulGoodbye")
	proto.RegisterType((*Ping)(nil), "talk.Ping")
	proto.RegisterType((*Pong)(nil), "talk.Pong")
	proto.RegisterType((*MeasureLatencyRequest)(nil), "talk.MeasureLatencyRequest")
	proto.RegisterType((*MeasureLatencyResponse)(nil), "talk.MeasureLatencyResponse")
}

func init() { proto.RegisterFile("communication.proto", fileDescriptor_b64068f22c460ac1) }

var fileDescriptor_b64068f22c460ac1 = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xeb, 0xd4, 0x71, 0xe2, 0x31, 0xa2, 0xd6, 0x02, 0x95, 0x45, 0x21, 0x14, 0x9f, 0x4a,
	0x0f, 0x91, 0x28, 0x48, 0x48, 0x88, 0x4b, 0x68, 0x42, 0xb0, 0x68, 0x1d, 0xcb, 0x2a, 0x45, 0x9c,
	0x22, 0xd7, 0x9e, 0x84, 0x05, 0x67, 0xd7, 0xac, 0xd7, 0x11, 0x79, 0x13, 0xde, 0x08, 0x8e, 0x3c,
	0x02, 0x0a, 0x2f, 0x82, 0xbc, 0xeb, 0x26, 0x08, 0xc1, 0x29, 0xff, 0xff, 0x6f, 0x66, 0xf6, 0x9b,
	0xb1, 0x0d, 0xb7, 0x52, 0xbe, 0x58, 0x54, 0x8c, 0xa6, 0x89, 0xa4, 0x9c, 0xf5, 0x0b, 0xc1, 0x25,
	0x27, 0xa6, 0x4c, 0xf2, 0x4f, 0x7e, 0x0e, 0x30, 0x88, 0x82, 0x4b, 0x14, 0x25, 0xe5, 0x8c, 0xdc,
	0x86, 0xf6, 0x22, 0xf9, 0xc8, 0x85, 0x67, 0x1c, 0x1a, 0x47, 0x66, 0xac, 0x8d, 0x4a, 0x29, 0xe3,
	0xc2, 0x6b, 0x35, 0x69, 0x6d, 0xea, 0xb4, 0x48, 0x64, 0xfa, 0xc1, 0xdb, 0xd5, 0xa9, 0x32, 0xe4,
	0x1e, 0xd8, 0xf8, 0x45, 0x22, 0xab, 0xdb, 0x79, 0xe6, 0xa1, 0x71, 0x64, 0xc7, 0xdb, 0xc0, 0xff,
	0xd6, 0x02, 0x38, 0xcd, 0x29, 0x32, 0x19, 0xb0, 0x19, 0x27, 0x07, 0x60, 0x67, 0xb8, 0xa4, 0x29,
	0x4e, 0x69, 0xa6, 0xae, 0xb4, 0xe3, 0xae, 0x0e, 0x82, 0x8c, 0x3c, 0x06, 0x27, 0x29, 0xe8, 0x74,
	0xa9, 0xd1, 0xd4, 0xdd, 0xce, 0x89, 0xdb, 0xaf, 0xa9, 0xfb, 0x5b, 0xe4, 0x18, 0x92, 0x82, 0x5e,
	0xe3, 0xdf, 0x07, 0xb8, 0xaa, 0x68, 0x9e, 0x4d, 0x25, 0x5d, 0x60, 0xc3, 0x65, 0xab, 0xe4, 0x82,
	0x2e, 0x90, 0xdc, 0x85, 0xae, 0xc0, 0x25, 0xfd, 0x03, 0x6d, 0xe3, 0xc9, 0x3e, 0x58, 0x25, 0xa6,
	0x02, 0xa5, 0xd7, 0x56, 0x27, 0x8d, 0x23, 0x0f, 0xc0, 0x49, 0x15, 0xb0, 0xee, 0x69, 0xa9, 0x9e,
	0xa0, 0x23, 0xd5, 0xf4, 0x05, 0x38, 0xcd, 0x0c, 0x72, 0x55, 0xa0, 0xd7, 0x39, 0x34, 0x8e, 0x6e,
	0x9e, 0x1c, 0x68, 0xcc, 0xed, 0xa8, 0xfd, 0xa1, 0xfa, 0xcf, 0xc5, 0xaa, 0xc0, 0x18, 0xb2, 0x8d,
	0xf6, 0x9f, 0x01, 0x6c, 0x4f, 0x88, 0x03, 0x9d, 0xb7, 0xe1, 0x9b, 0x70, 0xf2, 0x2e, 0x74, 0x77,
	0x88, 0x0d, 0xed, 0xe8, 0xf5, 0x24, 0x1c, 0xb9, 0x46, 0x2d, 0xcf, 0x47, 0xc3, 0x60, 0xe0, 0xb6,
	0x88, 0x05, 0xad, 0xe8, 0xd4, 0xdd, 0xf5, 0x8f, 0xa1, 0x33, 0x28, 0x0a, 0xc1, 0x97, 0x58, 0x23,
	0x96, 0x28, 0x96, 0x28, 0x34, 0xa2, 0x7e, 0x48, 0xa0, 0xa3, 0x1a, 0xd1, 0x7f, 0x0a, 0xd6, 0x10,
	0x19, 0xc5, 0xac, 0x9e, 0x52, 0x60, 0x52, 0x72, 0xd6, 0x6c, 0xbb, 0x71, 0x84, 0x80, 0x59, 0xf2,
	0x99, 0x54, 0xb5, 0xdd, 0x58, 0x69, 0xff, 0x11, 0xec, 0x8d, 0x45, 0x92, 0xe2, 0xac, 0xca, 0xc7,
	0x9c, 0x67, 0x57, 0x2b, 0xfc, 0x5f, 0xb9, 0x6f, 0x81, 0x19, 0x51, 0x36, 0x57, 0xbf, 0x9c, 0xcd,
	0xfd, 0xe7, 0x70, 0xe7, 0x1c, 0x93, 0xb2, 0x12, 0x78, 0x96, 0x48, 0x64, 0xe9, 0x2a, 0xc6, 0xcf,
	0x15, 0x96, 0x92, 0x3c, 0x84, 0x1b, 0x69, 0x25, 0xc4, 0x66, 0x9d, 0xfa, 0x35, 0x73, 0x9a, 0x4c,
	0xc1, 0x9e, 0xc0, 0xfe, 0xdf, 0xb5, 0x65, 0xc1, 0x59, 0x89, 0xc4, 0x83, 0x4e, 0xae, 0xa3, 0xa6,
	0xee, 0xda, 0x1e, 0x5f, 0x82, 0x73, 0x8e, 0x65, 0x99, 0xcc, 0xff, 0xb1, 0x46, 0x07, 0x3a, 0x83,
	0x28, 0x8a, 0x27, 0x97, 0xf5, 0x22, 0xbb, 0x60, 0x0e, 0x47, 0xe1, 0x7b, 0xb7, 0x55, 0xab, 0x28,
	0x08, 0xc7, 0xee, 0xae, 0x52, 0x93, 0x70, 0xec, 0x9a, 0x64, 0x0f, 0x9c, 0xd3, 0xb3, 0x60, 0x14,
	0x5e, 0x4c, 0x83, 0xf0, 0xd5, 0xc4, 0x6d, 0xbf, 0x74, 0xbf, 0xaf, 0x7b, 0xc6, 0x8f, 0x75, 0xcf,
	0xf8, 0xb9, 0xee, 0x19, 0x5f, 0x7f, 0xf5, 0x76, 0xae, 0x2c, 0xf5, 0xed, 0x3c, 0xf9, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0x57, 0x7d, 0x64, 0x70, 0x52, 0x03, 0x00, 0x00,
}

func (m *APIVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extension) > 0 {
		i -= len(m.Extension)
		copy(dAtA[i:], m.Extension)
		i = encodeVarintCommunication(dAtA, i, uint64(len(m.Extension)))
		i--
		dAtA[i] = 0x22
	}
	if m.Patch != 0 {
		i = encodeVarintCommunication(dAtA, i, uint64(m.Patch))
		i--
		dAtA[i] = 0x18
	}
	if m.Minor != 0 {
		i = encodeVarintCommunication(dAtA, i, uint64(m.Minor))
		i--
		dAtA[i] = 0x10
	}
	if m.Major != 0 {
		i = encodeVarintCommunication(dAtA, i, uint64(m.Major))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeviceType != 0 {
		i = encodeVarintCommunication(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x38
	}
	if m.ClientTime != 0 {
		i = encodeVarintCommunication(dAtA, i, uint64(m.ClientTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintCommunication(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Revision) > 0 {
		i -= len(m.Revision)
		copy(dAtA[i:], m.Revision)
		i = encodeVarintCommunication(dAtA, i, uint64(len(m.Revision)))
		i--
		dAtA[i] = 0x22
	}
	if m.BuildTime != 0 {
		i = encodeVarintCommunication(dAtA, i, uint64(m.BuildTime))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiVersion != nil {
		{
			size, err := m.ApiVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommunication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintCommunication(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Approve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Approve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Approve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServerTime != 0 {
		i = encodeVarintCommunication(dAtA, i, uint64(m.ServerTime))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Denied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Denied) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Denied) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Soft {
		i--
		if m.Soft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintCommunication(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GracefulGoodbye) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GracefulGoodbye) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GracefulGoodbye) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintCommunication(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MeasureLatencyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeasureLatencyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeasureLatencyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrentTime != 0 {
		i = encodeVarintCommunication(dAtA, i, uint64(m.CurrentTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MeasureLatencyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeasureLatencyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeasureLatencyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Latency != 0 {
		i = encodeVarintCommunication(dAtA, i, uint64(m.Latency))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommunication(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommunication(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *APIVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Major != 0 {
		n += 1 + sovCommunication(uint64(m.Major))
	}
	if m.Minor != 0 {
		n += 1 + sovCommunication(uint64(m.Minor))
	}
	if m.Patch != 0 {
		n += 1 + sovCommunication(uint64(m.Patch))
	}
	l = len(m.Extension)
	if l > 0 {
		n += 1 + l + sovCommunication(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovCommunication(uint64(l))
	}
	if m.ApiVersion != nil {
		l = m.ApiVersion.Size()
		n += 1 + l + sovCommunication(uint64(l))
	}
	if m.BuildTime != 0 {
		n += 1 + sovCommunication(uint64(m.BuildTime))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 1 + l + sovCommunication(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovCommunication(uint64(l))
	}
	if m.ClientTime != 0 {
		n += 1 + sovCommunication(uint64(m.ClientTime))
	}
	if m.DeviceType != 0 {
		n += 1 + sovCommunication(uint64(m.DeviceType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Approve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerTime != 0 {
		n += 1 + sovCommunication(uint64(m.ServerTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Denied) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovCommunication(uint64(l))
	}
	if m.Soft {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GracefulGoodbye) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovCommunication(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Pong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeasureLatencyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentTime != 0 {
		n += 1 + sovCommunication(uint64(m.CurrentTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeasureLatencyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Latency != 0 {
		n += 1 + sovCommunication(uint64(m.Latency))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommunication(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommunication(x uint64) (n int) {
	return sovCommunication(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *APIVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minor", wireType)
			}
			m.Minor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minor |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patch", wireType)
			}
			m.Patch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Patch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommunication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiVersion == nil {
				m.ApiVersion = &APIVersion{}
			}
			if err := m.ApiVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildTime", wireType)
			}
			m.BuildTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTime", wireType)
			}
			m.ClientTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= ClientInfo_DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Approve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Approve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Approve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			m.ServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Denied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Denied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Denied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Soft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Soft = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GracefulGoodbye) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GracefulGoodbye: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GracefulGoodbye: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommunication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommunication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeasureLatencyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeasureLatencyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeasureLatencyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTime", wireType)
			}
			m.CurrentTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeasureLatencyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeasureLatencyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeasureLatencyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			m.Latency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Latency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommunication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommunication(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommunication
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommunication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommunication
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommunication
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommunication
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommunication        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommunication          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommunication = fmt.Errorf("proto: unexpected end of group")
)
